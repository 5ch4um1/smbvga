random info:

when i turned it into boot rom mode (or maybe it was in another, like, error mode?)

  edit regarding the boot rom mode, i tried to read a bit of the code of the flasher tool from smbusb and tried to
 implement the part where it checks the boot rom version with i2cget, and it actually gives me 3.1, so i guess that 
 might suggest that this really is boot rom mode and it is running the same boot rom version like in the blog post.
 so, i guess writing should also work, only problem so far, i don't know how to make i2ctool accept addresses higher than 0xff, 
 i read somewhere that bigger devices should then show up with more addresses on the bus, the eeprom on the ar9271
 behaved like that. But i guess since this eeprom is somehow "integrated", it means i am talking only to the ec, and the ec talks to the eeprom or what? 
 and when i enter boot rom mode, it simply exposes more of that eeprom? and so the part i am interested in would be at another offset now? well, i'll take another look at that flasher tool and see if i can understand what it does and if i can replicate that with i2ctools... 



and then plugged it into the laptop,
the laptop turned off after a few seconds, so i guess it was running from battery?
need to charge again and check that by plugging out the power supply!
or maybe it just took it some time to realize: duuude, that battery has so many failure flags lit, if i don't 
shut down immediately, everything 's gonna explode? but then, what took it so long to realize that? :D 

at the moment i'm hitting some sort of brick wall... information is scarse and mostly proprietary,
i try stuff that i find in datasheets, but things won't work.
it's a bit like: the more you learn, the less you know...
also i'm not so sure anymore if what i enter by writing 0517 to 70 really is the boot rom mode?
first time i plugged it into my laptop in this mode, it almost shut down immediately.
the second time, it took a bit longer. maybe because it was actually running off the battery,
and i had charged it externally in the meantime?
So, this mode seems interesting, it still shows the manufacturer name (a different one) but the addresses
where those failure flags are stored seem to be not readable. well, this includes what i suppose to be
battery status, not sure if this is a good thing... anyway, i'd like to get the voltage above 10v and see
if this maybe automagically opens a fet that might have been closed before?
all just guessing, i don't even have a multimeter, and if so, i lack knowledge in electronics, so i wouldn't
know where to measure... still would be a nice thing to have i guess...

i'd still love to see what laptop and battery talk to each other...
my mic-in sucks... 
i wonder if i could use my rtl-sdr? also only one channel then, but a much better sample rate?
no idea of electronics, i guess i'd need to put a huge ass resistor between the sdr and the bus?
just plug a extra piece of copper wire into the the connectors on the battery side to work as a sending antenna
and then get the recieving antenna as close as needed? tempest over i2c? :D xD ;P  

current strategies include reading russian electronics forums with google translate, blet...
amazing people, they got the spirit! :)


